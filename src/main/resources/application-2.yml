? ''
  : META-INF /行家/ **，META-INF /资源/ **，资源/ **，静态/ **，公共/ **，模板/ **，** / *的Test.class，** / * Tests.class，git.properties，META-INF / build-info.properties ＃应该从触发完全重启中排除的模式。
-join: true ＃启动XAResources时是否应该使用TMJOIN。spring.jta.bitronix.properties.allow-multiple-lrc = false ＃是否允许多个LRC资源登记到同一事务中。
.chring.gson.disable-inner-class-serialization: ＃是否在序列化期间排除内部类。
'127': '\。\ d {1,3} \。\ d {1,3} \。\ d {1,3} | \ '
'169': '\。254 \。\ d {1,3} \。\ d {1， 3} | \ '
'172': \。3 [0-1] {1} \。\ d {1,3} \。\ d {1 ，3} \         0：0：0：0：0：0：0：1 \
'192': '\。168 \。\ d {1,3} \。\ d {1,3} | \ '
Flyway: 管理的方案名称（区分大小写）。spring.flyway.skip-default-callbacks = false ＃是否跳过默认回调。如果为true，则仅使用自定义回调。
JSON:
  chring:
    gson:
      long-serialization-policy: ＃长和长类型的序列化策略。
RequestContext属性的名称。spring:
  freemarker:
    settings。*: ＃众所周知的FreeMarker密钥，传递给FreeMarker的配置。
  mustache:
    suffix: .mustache ＃后缀应用于模板名称。
debug: false ＃启用调试日志。
info: ＃要添加到信息端点的任意属性。
logging:
  config: ＃日志配置文件的位置。例如，Logback的`classpath：logback.xml`。
  exception-conversion-word: ％wEx ＃记录异常时使用的转换字。
  file: ＃日志文件名（例如，`myapp.log`）。名称可以是精确位置或相对于当前目录。
  file.max-history: 0 ＃要保留的归档日志文件的最大值。仅支持默认的logback设置。
  group。*: ＃日志组可以同时快速更改多个记录器。例如，`logging.level.db = org.hibernate，org.springframework.jdbc`。
  level。*: ＃日志级别严重等级映射。例如，`logging.level.org.springframework = DEBUG`。
  path: ＃日志文件的位置。例如，`/ var / log`。
  pattern:
    console: ＃用于输出到控制台的Appender模式。仅支持默认的Logback设置。
    dateformat: yyyy-MM-dd HH：mm：ss.SSS ＃日志日期格式的Appender模式。仅支持默认的Logback设置。
    file: ＃用于输出到文件的Appender模式。仅支持默认的Logback设置。
    level: ％5p ＃日志级别的Appender模式。仅支持默认的Logback设置。
  register-shutdown-hook: false ＃在日志记录系统初始化时注册一个关闭钩子。
management:
  cloudfoundry:
    enabled: true ＃是否启用扩展的Cloud Foundry执行器端点。
    skip-ssl-validation: false ＃是否跳过Cloud Foundry执行器端点安全调用的SSL验证。
  endpoint:
    auditevents:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用auditevents端点。
    beans:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用beans端点。
    caches:
      cache:
        time-to-live: 0ms＃可以缓存响应的最长时间。
      enabled: true ＃是否启用缓存端点。
    conditions:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用条件端点。
    configprops:
      cache:
        time-to-live: 0ms＃可以缓存响应的最长时间。
      enabled: true ＃是否启用configprops端点。
      keys-to-sanitize: password，secret，key，token，。* credentials。*，vcap_services，sun.java.command ＃应该清理的密钥。键可以是属性结尾的简单字符串或正则表达式。
    env:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用env端点。
      keys-to-sanitize: password，secret，key，token，。* credentials。*，vcap_services，sun.java.command ＃应该清理的密钥。键可以是属性结尾的简单字符串或正则表达式。
    flyway:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用flyway端点。
    health:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用运行状况端点。
      roles: ＃用于确定是否授权用户显示详细信息的角色。为空时，所有经过身份验证的用户都被授权。
      show-details: never ＃何时显示完整的健康详细信息。
    heapdump:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用heapdump端点。
    httptrace:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用httptrace端点。
    info:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用信息端点。
    integrationgraph:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用集成图终结点。
    jolokia:
      config。*: ＃Jolokia设置。有关更多详细信息，请参阅Jolokia的文档。
      enabled: true ＃是否启用jolokia端点。
    liquibase:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true＃是否启用liquibase端点。
    logfile:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用日志文件端点。
      external-file: ＃要访问的外部日志文件。如果日志文件由输出重定向而不是日志记录系统本身写入，则可以使用。
    loggers:
      cache:
        time-to-live: 0ms＃可以缓存响应的最长时间。
      enabled: true ＃是否启用记录器端点。
    mappings:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用映射端点。
    metrics:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用指标端点。
    prometheus:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用prometheus端点。
    scheduledtasks:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用scheduledtasks端点。
    sessions:
      enabled: true ＃是否启用会话端点。
    shutdown:
      enabled: false ＃是否启用关闭端点。
    threaddump:
      cache:
        time-to-live: 0ms ＃可以缓存响应的最长时间。
      enabled: true ＃是否启用threaddump端点。
  endpoints:
    enabled-by-default: ＃
    jmx:
      domain: 'org.springframework.boot #Endpoints JMX域名。如果设置，则回退到''spring.jmx.default-domain''。'
      exposure:
        exclude: ＃应排除的端点ID或所有的'*'。
        include: '*＃应包含的端点ID或所有的“*”。'
      static-names: ＃附加的静态属性，附加到表示端点的MBean的所有ObjectName。
    web:
      base-path: / actuator#Web端点的基本路径。相对于server.servlet.context-path或management.server.servlet.context-path，如果配置了management.server.port。
      cors:
        allow-credentials: ＃是否支持凭据。未设置时，不支持凭据。
        allowed-headers: ＃逗号分隔的请求中允许的标头列表。'*'允许所有标题。
        allowed-methods: ＃逗号分隔的方法列表允许。'*'允许所有方法。未设置时，默认为GET。
        allowed-originins: ''
        exposed-headers: ＃逗号分隔的标题列表，包含在响应中。
      exposure:
        exclude: ＃应排除的端点ID或所有的'*'。
        include: health，info ＃应包含的端点ID或所有的“*”。
      path-mapping: ＃端点ID与应公开它们的路径之间的映射。
  health:
    cassandra:
      enabled: true＃是否启用Cassandra健康检查。
    couchbase:
      enabled: true ＃是否启用Couchbase运行状况检查。
    db:
      enabled: true ＃是否启用数据库运行状况检查。
    defaults:
      enabled: true ＃是否启用默认健康指标。
    diskspace:
      enabled: true ＃是否启用磁盘空间运行状况检查。
      path: ＃用于计算可用磁盘空间的路径。
      threshold: ＃应该可用的最小磁盘空间。
    elasticsearch:
      enabled: true ＃是否启用Elasticsearch运行状况检查。
      indices: ＃逗号分隔的索引名称。
      response-timeout: 100ms ＃等待集群响应的时间。
    influxdb:
      enabled: true ＃是否启用InfluxDB运行状况检查。
    jms:
      enabled: true ＃是否启用JMS运行状况检查。
    ldap:
      enabled: true ＃是否启用LDAP运行状况检查。
    mail:
      enabled: true ＃是否启用邮件健康检查。
    mongo:
      enabled: true ＃是否启用MongoDB运行状况检查。
    neo4j:
      enabled: true＃是否启用Neo4j健康检查。
    rabbit:
      enabled: true ＃是否启用RabbitMQ运行状况检查。
    redis:
      enabled: true ＃是否启用Redis运行状况检查。
    solr:
      enabled: true ＃是否启用Solr运行状况检查。
    status:
      http-mapping: ＃将健康状态映射到HTTP状态代码。默认情况下，已注册的运行状况映射到合理的默认值（例如，UP映射到200）。
      order: DOWN，OUT_OF_SERVICE，UP，UNKNOWN ＃以逗号分隔的健康状态列表，按严重程度排序。
  info:
    build:
      enabled: true ＃是否启用构建信息。
    defaults:
      enabled: true ＃是否启用默认信息贡献者。
    env:
      enabled: true ＃是否启用环境信息。
    git:
      enabled: true ＃是否启用git信息。
      mode: simple ＃用于公开git信息的模式。
  metrics:
    distribution:
      maximum-expected-value。*: ＃预计将以指定名称开始计量ID的最大值。
      minimum-expected-value。*: ＃预计将以指定名称开始的仪表ID的最小值。
      percentiles-histogram。*: ＃是否以指定名称开头的米ID应发布百分位直方图。
      percentiles。*: ＃特定计算的非可聚合百分位数，用于以指定名称开始的仪表ID发送到后端。
      sla。*: ＃以指定名称开头的仪表ID的特定SLA边界。最长的比赛获胜。
    enable。*: ＃应启用是否以指定名称开始的仪表ID。最长的匹配获胜，关键的“all”也可以用于配置所有的米。
    export:
      appoptics:
        api-token: '#AppOptics API令牌。'
        batch-size: 500 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        connect-timeout: 5s＃对此后端的请求的连接超时。
        host-tag: instance ＃将指标发送到AppOptics时将映射到“@host”的标记。
        num-threads: 2 ＃指标发布计划程序使用的线程数。
        read-timeout: 10s ＃读取此后端请求的超时时间。
        step: 1m ＃要使用的步长（即报告频率）。
        uri: https://api.appoptics.com/v1/measurements# 将指标发送到的URI。
      atlas:
        batch-size: 10000 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        config-refresh-frequency: 10s ＃从LWC服务刷新配置设置的频率。
        config-time-to-live: '150s #LWC服务订阅的生存时间。'
        config-uri: 'http：// localhost：7101 / lwc / api / v1 / expressions / local-dev
          #Atlas LWC端点的URI，用于检索当前订阅。'
        connect-timeout: ＃对此后端的请求的连接超时。
        enabled: ''
        read-timeout: 10s ＃读取此后端请求的超时时间。
        step: 1m ＃要使用的步长（即报告频率）。
        uri: 'http：// localhost：7101 / api / v1 / publish #Atlas服务器的URI。'
      datadog:
        api-key: ＃Datadog API密钥。
        application-key: ＃Datadog应用程序密钥。不是严格要求，但通过向Datadog发送仪表描述，类型和基本单位来改进Datadog体验。
        connect-timeout: 1s ＃对此后端的请求的连接超时。
        descriptions: true ＃是否将描述元数据发布到Datadog。将其关闭以最小化发送的元数据量。
        enabled: true ＃是否启用将度量标准导出到此后端。
        host-tag: ＃将指标发送到Datadog时将映射到“host”的标记。
        num-threads: 2
      dynatrace:
        batch-size: 10000 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        connect-timeout: 1s ＃对此后端的请求的连接超时。
        device-id: 将度量标准导出到Dynatrace的自定义设备的ID。
        enabled: true ＃是否启用将度量标准导出到此后端。
        num-threads: 2
      elastic:
        batch-size: 10000 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        connect-timeout: 1s ＃对此后端的请求的连接超时。
        enabled: true ＃是否启用将度量标准导出到此后端。
        host: http：// localhost：9200 ＃将指标导出到的主机。
        index: metrics ＃将指标导出到的索引。
        index-date-format: yyyy-MM ＃用于滚动索引的索引日期格式。附加到索引名称后面加一个' - '。
        num-threads: 2 ＃指标发布计划程序使用的线程数。
        password: ＃弹性服务器的登录密码。
        read-timeout: 10s ＃读取此后端请求的超时时间。
        step: 1m ＃要使用的步长（即报告频率）。
        timestamp-field-name: '@ timestamp ＃时间戳字段的名称。 '
        user-name: ＃弹性服务器的登录用户。
      ganglia:
        addressing-mode: multicast ＃UDP寻址模式，单播或多播。
        duration-: units =毫秒＃用于报告持续时间的基本时间单位。
        enabled: true ＃是否启用向Ganglia导出指标。
        host: localhost ＃Ganglia服务器的主机，用于接收导出的指标。
        port: 8649 ＃Ganglia服务器端口，用于接收导出的指标。
        protocol-version: 3.1
      graphite:
        host: localhost ＃Graphite服务器的主机，用于接收导出的指标。
        port: 2004 ＃Graphite服务器的端口，用于接收导出的指标。
        protocol: pickled ＃在将数据发送到Graphite时使用的协议。
        rate-units: seconds ＃用于报告费率的基本时间单位。
        step: 1m ＃要使用的步长（即报告频率）。
        tags-as-prefix: ''
      humio:
        api-token: ＃Humio API令牌。
        batch-size: 10000 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        connect-timeout: 5s ＃对此后端的请求的连接超时。
        enabled: true ＃是否启用将度量标准导出到此后端。
        num-threads: 2 ＃指标发布计划程序使用的线程数。
        read-timeout: 10s＃读取此后端请求的超时时间。
        repository: sandbox ＃要将指标发布到的存储库的名称。
        step: 1m ＃要使用的步长（即报告频率）。
        tags。*: ＃Humio标签，用于描述将存储指标的数据源。Humio标签是与Micrometer标签不同的概念。千分尺的标签用于沿尺寸边界划分度量。
        uri: ＃将指标发送到的URI。如果您需要将指标发布到Humio的内部代理，您可以使用此方法定义代理的位置。
      influx:
        auto-create-db: true ＃在尝试向其发布指标之前，是否创建Influx数据库是否存在。
        batch-size: 10000 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        compressed: true ＃是否对发布到Influx的度量批次启用GZIP压缩。
        connect-timeout: ＃对此后端的请求的连接超时。
        consistency: one ＃为每个点写一致性。
        db: mydb ＃将指标发送到Influx时将映射到“主机”的标记。
        enabled: true ＃是否启用将度量标准导出到此后端。
        num-threads: 2 ＃指标发布计划程序使用的线程数。
        password: ＃Influx服务器的登录密码。
        read-timeout: ＃读取此后端请求的超时时间。
        retention-duration: ＃Influx应在当前数据库中保留数据的时间段。
        retention-policy: ＃要使用的保留策略（如果未指定，则Influx写入DEFAULT保留策略）。
        retention-replication-factor: ＃在群集中存储了多少份数据副本。
        retention-shard-duration: ＃分片组覆盖的时间范围。
        step: 1m ＃要使用的步长（即报告频率）。
        uri: http：// localhost：8086 ＃Influx服务器的URI。
        user-name: ＃Influx服务器的登录用户。
      jmx:
        domain: metrics ＃Metrics JMX域名。
        enabled: true ＃是否已启用将度量标准导出到JMX。
        step: 1m ＃要使用的步长（即报告频率）。
      kairos:
        batch-size: 10000 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        connect-timeout: 1s ＃对此后端的请求的连接超时。
        enabled: true
        uri: 'localhost：8080 / api / v1 /  datapoints #KairosDB服务器的URI。'
        user-name: '#KairosDB服务器的登录用户。'
      newrelic:
        account-id: ＃新Relic帐户ID。
        api-key: '#New Relic API密钥。'
        batch-size: 10000 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        connect-timeout: 1s ＃对此后端的请求的连接超时。
        enabled: true ＃是否启用将度量标准导出到此后端。
        num-threads: 2 ＃指标发布计划程序使用的线程数。
        read-timeout: 10s ＃读取此后端请求的超时时间。
        step: 1m ＃要使用的步长（即报告频率）。
        uri: 'https：//insights-collector.newrelic.com #idex 将指标发送到。'
      prometheus:
        descriptions: true＃是否将发布描述作为scrape有效负载的一部分启用到Prometheus。将其关闭以最小化每次刮擦发送的数据量。
        enabled: true ＃是否启用将指标导出到Prometheus。
        pushgateway:
          base-url: localhost：9091 ＃Pushgateway的基本URL。
          enabled: false ＃通过Prometheus Pushgateway启用发布。
          grouping键＃为推送的指标分组键。: ''
          job: ＃此应用程序实例的作业标识符。
          push-rate: 1m ＃用于推送指标的频率。
        step: 1m ＃要使用的步长（即报告频率）。
      signalfx:
        connect-timeout: 1s ＃对此后端的请求的连接超时。
        enabled: true ＃是否启用将度量标准导出到此后端。
        num-threads: 2 ＃指标发布计划程序使用的线程数。
        read-timeout: 10s ＃读取此后端请求的超时时间。
        source: ＃唯一标识正在向SignalFx发布指标的应用实例。默认为本地主机名。
        step: 10s＃步骤大小（即报告频率）使用。
        uri: https：//ingest.signalfx.com# 将指标发送到的URI。
      simple:
        enabled: true ＃在没有任何其他导出器的情况下，是否启用将指标导出到内存后端。
        mode: 累积＃计数模式。
        step: 1m ＃要使用的步长（即报告频率）。
      statsd:
        enabled: true ＃是否启用将度量标准导出到StatsD。
        flavor: datadog#StatsD线路协议使用。
        host: localhost ＃StatsD服务器的主机，用于接收导出的指标。
        max-packet-length: 1400 ＃单个有效负载的总长度应保持在网络的MTU中。
        polling-frequency: 10s ＃测量仪表
        publish-不变米: true ＃是否将未更改的计量表发送到StatsD服务器。
      wavefront:
        api-token: ＃将指标直接发布到Wavefront API主机时使用的API令牌。
        batch-size: 10000 ＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。
        connect-timeout: 1s ＃对此后端的请求的连接超时。
        enabled: true ＃是否启用将度量标准导出到此后端。
        global前缀＃全局前缀用于将源自此应用程序的白盒工具的度量标准与在Wavefront: UI中查看时源自其他Wavefront集成的度量标准分开。
        num-threads: 2 ＃指标发布计划程序使用的线程数。
        read-timeout: 10s ＃读取此后端请求的超时时间。
        source: ＃应用程序实例的唯一标识符，该实例是发布到Wavefront的度量标准的来源。默认为本地主机名。
        step: 10s ＃要使用的步长（即报告频率）。
        uri: https://longboard.wavefront.com# 将指标发送到的URI。
    tags。*: ＃应用于每个仪表的公共标签。
    use-global-registry: true ＃是否应将自动配置的MeterRegistry实现绑定到Metrics上的全局静态注册表。
    web:
      client:
        max-uri-tags: 100 ＃允许的唯一URI标记值的最大数量。达到最大标记值数后，过滤器将拒绝具有其他标记值的度量标准。
        requests-metric-name: http.client.requests ＃已发送请求的度量标准的名称。
      server:
        auto-time-requests: true ＃是否应自动为Spring MVC，WebFlux或Jersey处理的请求定时。
        max-uri-tags: 100 ＃允许的唯一URI标记值的最大数量。达到最大标记值数后，过滤器将拒绝具有其他标记值的度量标准。
        requests-metric-name: http.server.requests ＃已接收请求的度量标准的名称。
  server:
    add-application-context-header: false ＃在每个响应中添加“X-Application-Context”HTTP标头。
    address: ＃管理端点应绑定到的网络地址。需要自定义management.server.port。
    port: ＃管理端点HTTP端口（默认情况下使用与应用程序相同的端口）。配置其他端口以使用特定于管理的SSL。
    servlet:
      context-path: ＃管理端点context-path（例如，`/ management`）。需要自定义management.server.port。
    ssl:
      client-auth: ＃客户端身份验证模式。
      enabled: true ＃是否启用SSL支持。
      enabled-protocols: ＃启用SSL协议。
      key-alias: ＃标识密钥库中密钥的别名。
      key-password: ＃用于访问密钥库中密钥的密码。
      key-store: ＃保存SSL证书的密钥库的路径（通常是jks文件）。
      key-store-password: ＃用于访问密钥库的密码。
      key-store-provider: ＃密钥库的提供者。
      key-store-type: ＃密钥库的类型。
      protocol: TLS ＃要使用的SSL协议。
      trust-store: ＃持有SSL证书的信任存储。
      trust-store-password: ＃用于访问信任库的密码。
      trust-store-provider: ＃信任存储的提供者。
      trust-store-type: ＃信任库的类型。
  trace:
    http:
      enabled: true ＃是否启用HTTP请求 - 响应跟踪。
      include: 请求标头，响应标头，cookie，错误＃要包含在跟踪中的项目。
server:
  address: '#network address to服务器应绑定哪个。'
  compression:
    enabled: false ＃是否启用了响应压缩。
    excluded-user-agents: ＃逗号分隔的用户代理列表，不应压缩响应。
    mime-types: text / html，text / xml，text / plain，text / css，text / javascript，application / javascript，application / json，application / xml ＃逗号分隔的MIME类型列表应该是压缩。
    min-response-size: 2KB ＃执行压缩所需的最小“Content-Length”值。
  connection-timeout: ＃连接器在关闭连接之前等待另一个HTTP请求的时间。未设置时，将使用连接器的特定于容器的默认值。使用值-1表示没有（即无限）超时。
  error:
    include-exception: false＃包括“exception”属性。
    include-stacktrace: never ＃何时包含“stacktrace”属性。
    path: / error ＃错误控制器的路径。
    whitelabel:
      enabled: true ＃是否在服务器出错时启用浏览器中显示的默认错误页面。
  http2:
    enabled: false ＃是否启用HTTP / 2支持，如果当前环境支持它。
  jetty:
    acceptors: -1 ＃要使用的接受者线程数。当值为-1（默认值）时，接受器的数量是从操作环境派生的。
    accesslog:
      append: false＃附加到日志。
      date-format: dd / MMM / yyyy：HH：mm：ss Z ＃请求日志的时间戳格式。
      enabled: false ＃启用访问日志。
      extended-format: false ＃启用扩展NCSA格式。
      file-date-format: ＃日期文件名中的日期格式。
      filename: ＃日志文件名。如果未指定，则日志重定向到“System.err”。
      locale: ＃请求日志的区域设置。
      log-cookies: false ＃启用请求cookie的记录。
      log-latency: false ＃启用请求处理时间的记录。
      log-server: false ＃启用请求主机名的日志记录。
      retention-period: 31 ＃删除轮换日志文件之前的天数。
      time-zone: GMT ＃请求日志的时区。
    max-http-post-size: '200000B #HTTP post或put内容的最大大小。'
    selectors: -1 ＃要使用的选择器线程数。当值为-1（默认值）时，选择器的数量是从操作环境派生的。
  max-HTTP报头大小的: '8KB #HTTP 邮件头的最大大小。'
  port: 8080 ＃服务器HTTP端口。
  server-header: ＃用于Server响应头的值（如果为空，则不发送头）。
  servlet:
    application-display-name: application ＃显示
    context-parameters。*: ＃Servlet context init参数。
    context-path: ＃应用程序的上下文路径。
    jsp:
      init-parameters。*: ＃用于配置JSP servlet的Init参数。
      registered: true ＃是否注册了JSP servlet。
    session:
      cookie:
        comment: ＃会话cookie的评论。
        domain: ＃会话cookie的域名。
        http-only: ＃是否对会话cookie使用“HttpOnly”cookie。
        max-age: ＃会话cookie的最大年龄。如果未指定持续时间后缀，则将使用秒。
        name: ＃会话cookie名称。
        path: ＃会话cookie的路径。
        secure: ＃是否始终将会话cookie标记为安全。
      persistent: false ＃是否在重新启动之间保留会话数据。
      store-dir: ＃用于存储会话数据的目录。
      timeout: 30m ＃会话超时。如果未指定持续时间后缀，则将使用秒。
      tracking-modes: ＃会话跟踪模式。
  ssl:
    ciphers: ＃支持的SSL密码。
    client-auth: ＃客户端身份验证模式。
    enabled: true ＃是否启用SSL支持。
    enabled-protocols: ＃启用SSL协议。
    key-alias: ＃标识密钥库中密钥的别名。
    key-password: ＃用于访问密钥库中密钥的密码。
    key-store: ＃保存SSL证书的密钥库的路径（通常是jks文件）。
    key-store-password: ＃用于访问密钥库的密码。
    key-store-provider: ＃密钥库的提供者。
    key-store-type: ＃密钥库的类型。
    protocol: TLS ＃要使用的SSL协议。
    trust-store: ＃持有SSL证书的信任存储。
    trust-store-password: ＃用于访问信任库的密码。
    trust-store-provider: ＃信任存储的提供者。
    trust-store-type: ＃信任库的类型。
  tomcat:
    accept-count: 100＃当所有可能的请求处理线程都在使用时，传入连接请求的最大队列长度。
    accesslog:
      buffered: true ＃是否缓冲输出，使其仅定期刷新。
      directory: logs ＃创建日志文件的目录。可以绝对或相对于Tomcat基础目录。
      enabled: false ＃启用访问日志。
      file-date-format: .yyyy-MM-dd ＃要放在日志文件名中的日期格式。
      pattern: common ＃访问日志的格式模式。
      prefix: access_log＃日志文件名前缀。
      rename-on-rotate: false ＃是否延迟在文件名中包含日期戳，直到旋转时间。
      request-attributes-enabled: false ＃设置用于请求的IP地址，主机名，协议和端口的请求属性。
      rotate: true ＃是否启用访问日志轮换。
      suffix: .log ＃日志文件名后缀。
    additional-tld-skip-patterns: ＃逗号分隔的其他模式列表，这些模式匹配要忽略的TLD扫描的jar。
    background-processor-delay: 10s＃调用backgroundProcess方法之间的延迟。如果未指定持续时间后缀，则将使用秒。
    basedir: '#Tomcat 基目录。如果未指定，则使用临时目录。'
    internal-proxies: '10 \。\ d {1,3} \。\ d {1,3} \。\ d {1,3} | \ '
    max-connections: 10000 ＃服务器在任何给定时间接受和处理的最大连接数。
    max-http-post-size: '2MB #HTTP 帖子内容的最大大小。'
    max-swallow-size: 2MB ＃要吞咽的请求正文的最大数量。
    max-threads: 200 ＃最大工作线程数。
    min-spare-threads: 10 ＃最小工作线程数。
    port-header: X-Forwarded-Port ＃用于覆盖原始端口值的HTTP标头的名称。
    protocol-header: '#Header包含传入协议，通常命名为“X-Forwarded-Proto”。'
    protocol-header-https-value: https ＃协议标头的值，指示传入请求是否使用SSL。
    redirect-context-root: true ＃是否应通过在路径中附加/来重定向对上下文根的请求。
    remote-ip-header: ＃从中提取远程IP的HTTP头的名称。例如，`X-FORWARDED-FOR`。
    resource:
      allow-caching: true ＃是否允许此Web应用程序使用静态资源缓存。
      cache-ttl: ＃静态资源缓存的生存时间。
    uri-encoding: UTF-8 ＃用于解码URI的字符编码。
    use-relative-redirects: ＃通过调用sendRedirect生成的HTTP 1.1和更高版本的位置标头是使用相对还是绝对重定向。
  undertow:
    accesslog:
      dir: '#Undertow 访问日志目录。'
      enabled: false ＃是否启用访问日志。
      pattern: common ＃访问日志的格式模式。
      prefix: access_log。＃日志文件名前缀。
      rotate: true ＃是否启用访问日志轮换。
      suffix: log ＃日志文件名后缀。
    buffer-size: ＃每个缓冲区的大小。
    direct-buffers: ＃是否在Java堆外部分配缓冲区。默认值源自JVM可用的最大内存量。
    eager-filter-init: true ＃是否应在启动时初始化servlet过滤器。
    io-threads: ＃为worker创建的I / O线程数。默认值源自可用处理器的数量。
    max-http-post-size: -1B#HTTP帖子内容的最大大小。当值为-1时，默认值为大小无限制。
    worker-threads: ＃工作线程数。默认值是I / O线程数的8倍。
  use-forward-headers: ＃是否应将X-Forwarded- *标头应用于HttpRequest。
spring:
  activemq:
    broker-URL: ＃URL ActiveMQ经纪人。默认情况下自动生成。
    close-timeout: 15s ＃在考虑结束完成之前等待的时间。
    in记忆: true ＃默认代理URL是否应该在内存中。如果已指定显式代理，则忽略。
    non-blocking-redelivery: false ＃是否在从回滚事务重新传递消息之前停止消息传递。这意味着启用此消息顺序时不会保留消息顺序。
    packages:
      trust-all: ＃是否信任所有包。
      trusted: ＃逗号分隔的要信任的特定包列表（不信任所有包时）。
    password: ＃代理的登录密码。
    pool:
      block-if-full: true ＃是否阻止请求连接并且池已满。将其设置为false以改为抛出“JMSException”。
      block-if-full-timeout: -1ms ＃如果池仍然满，则在抛出异常之前阻塞。
      enabled: false ＃是否应创建JmsPoolConnectionFactory，而不是常规ConnectionFactory。
      idle-timeout: 30s ＃连接空闲超时。
      max-connections: 1＃池连接的最大数量。
      max-sessions-per-connection: 500 ＃池中每个连接的最大池化会话数。
      time-between-expiration-check: -1ms ＃在空闲连接驱逐线程的运行之间休眠的时间。当为负时，没有空闲连接驱逐线程运行。
      use-anonymous-producer: true ＃是否只使用一个匿名“MessageProducer”实例。将其设置为false以在每次需要时创建一个“MessageProducer”。
    send-timeout: 0ms ＃等待消息发送响应的时间。将其设置为0以永远等待。
    user: ＃代理的登录用户。
  aop:
    auto: 真＃添加@EnableAspectJAutoProxy。
    proxy-target-class: true ＃是否要创建基于子类的（CGLIB）代理（true），而不是基于标准Java接口的代理（false）。
  application:
    admin:
      enabled: false ＃是否为应用程序启用管理功能。
      jmx-name: 'org.springframework.boot：type = Admin，name = SpringApplication #JMX
        应用程序管理员MBean的名称。'
    name: '#Application name。'
  artemis:
    embedded:
      cluster-password: ＃群集密码。默认情况下在启动时随机生成。
      data-directory: '#Journal 文件目录。如果关闭持久性，则没有必要。'
      enabled: true ＃如果Artemis服务器API可用，是否启用嵌入模式。
      persistent: false ＃是否启用持久存储。
      queues: ＃逗号分隔的队列，在启动时创建。
      server-id: ＃服务器ID。默认情况下，使用自动递增的计数器。
      topics: ＃以逗号分隔的主题列表，可在启动时创建。
    host: localhost ＃Artemis broker主机。
    mode: ＃Artemis部署模式，默认情况下自动检测。
    password: ＃代理的登录密码。
    pool:
      block-if-full: true ＃是否在请求连接且池已满时阻止。将其设置为false以改为抛出“JMSException”。
      block-if-full-timeout: -1ms ＃如果池仍然满，则在抛出异常之前阻塞。
      enabled: false＃是否应创建JmsPoolConnectionFactory，而不是常规的ConnectionFactory。
      idle-timeout: 30s ＃连接空闲超时。
      max-connections: 1 ＃池化连接的最大数量。
      max-sessions-per-connection: 500 ＃池中每个连接的最大池化会话数。
      time-between-expiration-check: -1ms ＃在空闲连接驱逐线程的运行之间休眠的时间。当为负时，没有空闲连接驱逐线程运行。
      use-anonymous-producers: true＃是否只使用一个匿名“MessageProducer”实例。将其设置为false以在每次需要时创建一个“MessageProducer”。
    port: '61616 #Artemis 经纪人端口。'
    user: ＃代理的登录用户。
  autoconfigure:
    exclude: ＃要排除的自动配置类。
  banner:
    charset: UTF-8 ＃横幅文件编码。
    image:
      height: '#chars中横幅图像的高度（默认基于图像高度）。'
      invert: false ＃是否应针对暗终端主题反转图像。
      location: classpath：banner.gif ＃横幅图像文件位置（也可以使用jpg或png）。
      margin: 2 ＃字符中的左手图像边距。
      width: 76 ＃字符中的横幅图像的宽度。
    location: classpath：banner.txt ＃横幅文本资源位置。
  batch:
    initialize-schema: embedded ＃数据库模式初始化模式。
    job:
      enabled: true ＃在启动时执行上下文中的所有Spring Batch作业。
      names: ＃逗号分隔的要在启动时执行的作业名称列表（例如，`job1，job2`）。默认情况下，将执行上下文中找到的所有作业。
    schema: classpath中：组织/ springframework的/批号/核心/ schema- @ @ 平台@ @ .SQL ＃的路径SQL文件，以用于初始化数据库架构。
    table-prefix: ＃所有批次元数据表的表前缀。
  beaninfo:
    ignore: true ＃是否跳过BeanInfo类的搜索。
  cache:
    cache-names: '#Cmama 分隔的要创建的缓存名称列表（如果底层缓存管理器支持）。'
    caffeine:
      spec: ＃用于创建缓存的规范。有关规格格式的更多详细信息，请参阅CaffeineSpec。
    couchbase:
      expiration: ＃条目到期。默认情况下，条目永不过期。请注意，此值最终会转换为秒。
    ehcache:
      config: ＃用于初始化EhCache的配置文件的位置。
    infinispan:
      config: ＃用于初始化Infinispan的配置文件的位置。
    jcache:
      config: ＃用于初始化缓存管理器的配置文件的位置。
      provider: '#CachingProvider实现的完全限定名称，用于检索符合JSR-107的缓存管理器。仅当类路径上有多个JSR-107实现时才需要。'
    redis:
      cache-null-values: true ＃允许缓存空值。
      key-prefix: ＃键前缀。
      time-to-live: ＃条目到期。默认情况下，条目永不过期。
      use-key-prefix: true ＃写入Redis时是否使用密钥前缀。
    type: '#Cache 类型。默认情况下，根据环境自动检测。'
  config:
    additional-location: ＃配置除默认值之外的文件位置。
    location: ＃配置替换默认值的文件位置。
    name: application ＃配置文件名。
  couchbase:
    bootstrap-hosts: '#Couchbase 节点（主机或IP地址）来自引导程序。'
    bucket:
      name: default ＃要连接的存储桶的名称。
      password: ＃桶的密码。
    env:
      endpoints:
        key-value: 1 ＃针对键/值服务的每个节点的套接字数。
        queryservice:
          max-endpoints: 1 ＃每个节点的最大套接字数。
          min-endpoints: 1 ＃每个节点的最小套接字数。
        viewservice:
          max-endpoints: 1＃每个节点的最大套接字数。
          min-endpoints: 1 ＃每个节点的最小套接字数。
      ssl:
        enabled: ＃是否启用SSL支持。除非另有说明，否则在提供“keyStore”时自动启用。
        key-store: ＃保存证书的JVM密钥库的路径。
        key-store-password: ＃用于访问密钥库的密码。
      timeouts:
        connect: 5000ms ＃桶连接超时。
        key-value: 2500ms ＃对特定密钥超时执行的阻止操作。
        query: 7500ms ＃N1QL查询操作超时。
        socket-connect: '1000ms #Socket 连接超时。'
        view: 7500ms ＃常规和地理空间视图操作超时。
  dao:
    exceptiontranslation:
      enabled: true ＃是否启用PersistenceExceptionTranslationPostProcessor。
  data:
    cassandra:
      cluster-name: '#Cassandra 集群的名称。'
      compression: none ＃Cassandra二进制协议支持的压缩。
      connect-timeout: '#Socket 选项：连接超时。'
      consistency-level: ＃查询一致性级别。
      contact-points: localhost ＃群集节点地址。
      fetch-size: ＃查询默认提取大小。
      jmx-enabled: false ＃是否启用JMX报告。
      keyspace-name: ＃要使用的Keyspace名称。
      password: ＃服务器的登录密码。
      pool:
        heartbeat-interval: '30s #Heartbeat interval，在此之后，在空闲连接上发送消息以确保它仍然存在。如果未指定持续时间后缀，则将使用秒。'
        idle-timeout: 120s ＃删除空闲连接之前的空闲超时。如果未指定持续时间后缀，则将使用秒。
        max-queue-size: 256 ＃如果没有可用的连接，则排队的最大请求数。
        pool-timeout: 5000ms ＃尝试从主机池获取连接时的池超时。
      port: '#Cassandra 服务器的端口。'
      read-timeout: '#Socket选项：读取超时。'
      repositories:
        type: auto ＃要启用的Cassandra存储库的类型。
      schema-action: none ＃启动时要采取的架构操作。
      serial-consistency-level: ＃查询串行一致性级别。
      ssl: false ＃启用SSL支持。
      username: ＃服务器的登录用户。
    couchbase:
      auto-index: false ＃自动创建视图和索引。
      consistency: read-your-own-writes ＃在生成的查询中默认应用的一致性。
      repositories:
        type: auto ＃要启用的Couchbase存储库的类型。
    elasticsearch:
      cluster-name: elasticsearch ＃Elasticsearch集群名称。
      cluster-nodes: ＃逗号分隔的集群节点地址列表。
      properties。*: ＃用于配置客户端的其他属性。
      repositories:
        enabled: true ＃是否启用Elasticsearch存储库。
    jdbc:
      repositories:
        enabled: true ＃是否启用JDBC存储库。
    jpa:
      repositories:
        bootstrap-mode: 'default #JAPA 存储库的Bootstrap模式。'
        enabled: true ＃是否启用JPA存储库。
    ldap:
      repositories:
        enabled: true ＃是否启用LDAP存储库。
    mongodb:
      authentication-database: ＃认证数据库名称。
      database: ＃数据库名称。
      field-naming-strategy: ＃要使用的FieldNamingStrategy的完全限定名称。
      grid-fs-database: ＃GridFS数据库名称。
      host: '#Mongo服务器主机。无法使用URI设置。'
      password: '#mongo 服务器的登录密码。无法使用URI设置。'
      port: '#Mongo 服务器端口。无法使用URI设置。'
      repositories:
        type: auto ＃要启用的Mongo存储库的类型。
      uri: mongodb：// localhost / test ＃Mongo数据库URI。无法使用主机，端口和凭据进行设置。
      username: '#mongo 服务器的登录用户。无法使用URI设置。'
    neo4j:
      auto-index: none ＃自动索引模式。
      embedded:
        enabled: true ＃如果嵌入式驱动程序可用，是否启用嵌入模式。
      open-in-view: true ＃注册OpenSessionInViewInterceptor。将Neo4j会话绑定到线程以进行整个请求处理。
      password: ＃服务器的登录密码。
      repositories:
        enabled: true ＃是否启用Neo4j存储库。
      uri: 驱动程序使用的#URL 。默认情况下自动检测。
      username: ＃服务器的登录用户。
    redis:
      repositories:
        enabled: true ＃是否启用Redis存储库。
    rest:
      base-path: '#Spring Data REST用于公开存储库资源的基本路径。'
      default-media-type: ＃未指定时用作默认值的内容类型。
      default-page-size: ＃默认页面大小。
      detection-strategy: default ＃用于确定暴露哪些存储库的策略。
      enable-enum-translation: ＃是否通过Spring Data REST默认资源包启用枚举值转换。
      limit-param-name: '#URL 查询字符串参数的名称，该参数指示一次返回多少结果。'
      max-page-size: ＃最大页面大小。
      page-param-name: '#URL 查询字符串参数的名称，指示要返回的页面。'
      return-body-on-create: ＃是否在创建实体后返回响应正文。
      return-body-on-update: ＃更新实体后是否返回响应正文。
      sort-param-name: '#URL查询字符串参数的名称，指示对结果进行排序的方向。'
    solr:
      host: 'http：//127.0.0.1：8983 / solr #Solr host。如果设置了“zk-host”，则忽略。'
      repositories:
        enabled: true ＃是否启用Solr存储库。
      zk-host: ＃ZooKeeper主机地址，格式为HOST：PORT。
    web:
      pageable:
        default页大小: 20 ＃缺省页大小。
        max-page-size: 2000 ＃要接受的最大页面大小。
        one-indexed-parameters: false ＃是否公开和假设从1开始的页码索引。
        page-parameter: page ＃页面索引参数名称。
        prefix: ＃
        size-parameter: size ＃页面大小参数名称。
      sort:
        sort-parameter: sort ＃排序参数名称。
  datasource:
    continue-on-error: false ＃初始化数据库时是否发生错误时停止。
    data: '#Data （DML）脚本资源引用。'
    data-password: ＃执行DML脚本的数据库的密码（如果不同）。
    data-username: ＃用于执行DML脚本的数据库的用户名（如果不同）。
    dbcp2。*: ＃Commons DBCP2特定设置
    driver-class-name: '#JDBC驱动程序的完全限定名称。默认情况下，基于URL自动检测。'
    generate-unique-name: false ＃是否生成随机数据源名称。
    hikari。*: ＃Hikari特定设置
    initialization-mode: embedded ＃使用可用的DDL和DML脚本初始化数据源。
    jmx-enabled: false ＃是否启用JMX支持（如果由基础池提供）。
    jndi-name: ＃JNDI数据源的位置。设置时将忽略类，URL，用户名和密码。
    name: ＃数据源的名称。使用嵌入式数据库时默认为“testdb”。
    password: ＃数据库的登录密码。
    platform: all ＃在DDL或DML脚本中使用的平台（例如架构 -  $ {platform} .sql或data  -  $ {platform} .sql）。
    schema: '#Schema （DDL）脚本资源引用。'
    schema-username: ＃执行DDL脚本的数据库
    separator: ;#SQL初始化脚本中的语句分隔符。
    sql-script-encoding: '#SQL 脚本编码。'
    tomcat。*: ＃Tomcat数据源特定设置
    type: ＃要使用的连接池实现的完全限定名称。默认情况下，它是从类路径中自动检测到的。
    url: ＃JDBC数据库的URL。
    username: ＃登录数据库的用户名。
    xa:
      data-source-class-name: '#XA 数据源完全限定名称。'
      properties: ＃传递给XA数据源的属性。
  devtools:
    add-properties: true＃是否启用开发属性默认值。
    livereload:
      enabled: true ＃是否启用livereload.com兼容服务器。
      port: 35729 ＃服务器端口。
    remote:
      context-path: /。~~ spring-boot！〜＃用于处理远程连接的上下文路径。
      proxy:
        host: ＃用于连接远程应用程序的代理主机。
        port: ＃用于连接远程应用程序的代理端口。
      restart:
        enabled: true ＃是否启用远程重启。
      secret: ＃建立连接所需的共享密钥（启用远程支持所需）。
      secret-header-name: X-AUTH-TOKEN ＃用于传输共享密钥的HTTP头。
    restart:
      additional-exclude: ＃应该从触发完全重启中排除的其他模式。
      additional-paths: ＃要监视更改的其他路径。
      enabled: true ＃是否启用自动重启。
      log-condition-evaluation-delta: true ＃是否在重新启动时记录条件评估增量。
      poll-interval: 1s ＃轮询类路径更改之间等待的时间。
      quiet-period: 400ms ＃触发重启之前没有任何类路径更改所需的安静时间量。
      trigger-file: ＃特定文件的名称，当更改时，触发重新启动检查。如果未指定，则任何类路径文件更改都会触发重新启动。
  elasticsearch:
    jest:
      connection-timeout: 3s ＃连接超时。
      multi-threaded: true ＃是否从多个执行线程启用连接请求。
      password: ＃登录密码。
      proxy:
        host: '#HTTP 客户端应使用的代理主机。'
        port: '#HTTP 客户端应使用的代理端口。'
      read-timeout: 3s ＃读取超时。
      uris: http：// localhost：9200 ＃要使用的Elasticsearch实例的逗号分隔列表。
      username: ＃登录用户名。
    rest:
      password: ＃凭据密码。
      uris: http：// localhost：9200 ＃要使用的以逗号分隔的Elasticsearch实例列表。
      username: ＃凭据用户名。
  flyway:
    baseline-description: << Flyway Baseline >> ＃描述在应用基线时标记现有模式。
    baseline-on-migrate: false ＃是否在迁移非空架构时自动调用基线。
    baseline-version: 1 ＃用于在执行基线时标记现有模式的版本。
    check-location: true ＃是否检查迁移脚本位置是否存在。
    clean-disabled: false ＃是否禁用数据库清理。
    clean-on-validation-error: false＃发生验证错误时是否自动调用clean。
    connect-retries: 0 ＃尝试连接数据库时的最大重试次数。
    enabled: true ＃是否启用flyway。
    encoding: 'UTF-8 #SQL 迁移的编码。'
    group: false ＃是否在应用它们时在同一事务中将所有挂起的迁移组合在一起。
    ignore-future-migrations: true ＃在读取架构历史记录表时是否忽略未来的迁移。
    ignore-ignored-migrations: false＃是否在读取模式历史记录表时忽略忽略的迁移。
    ignore-missing-migrations: false ＃是否在读取模式历史记录表时忽略缺少的迁移。
    ignore-pending-migrations: false ＃在读取架构历史记录表时是否忽略挂起的迁移。
    init-sqls: ＃在获取连接后立即执行以初始化连接的SQL语句。
    installed-by: ＃用户名在架构历史记录表中记录为已应用迁移。
    locations: classpath：db / migration＃迁移脚本的位置。可以包含特殊的“{vendor}”占位符以使用特定于供应商的位置。
    mixed: false ＃是否允许在同一迁移中混合事务和非事务语句。
    out-of-order: false ＃是否允许迁移无序运行。
    password: ＃要迁移的数据库的登录密码。
    placeholder-prefix: $ { ＃迁移脚本中占位符的前缀。
    placeholder-replacement: true ＃在迁移脚本中执行占位符替换。
    placeholder-suffix: '}＃迁移脚本中占位符的后缀。'
    placeholders: ＃占位符及其替换应用于sql迁移脚本。
    repeatable-sql-migration-prefix: R ＃可重复SQL迁移的文件名前缀。
    schemas: ＃由
    skip-default-resolvers: false ＃是否跳过默认的解析器。如果为true，则仅使用自定义解析程序。
    sql-migration-prefix: V.#SQL迁移的文件名前缀。
    sql-migration-separator: '__ #SQL迁移的文件名分隔符。'
    sql-migration-suffixes: '.sql #SQL迁移的文件名后缀。'
    table: flyway_schema_history ＃
    url: 要迁移的数据库的JDBC url。如果未设置，则使用主要配置的数据源。
    user: ＃要迁移的数据库的登录用户。
    validate-on-migrate: true ＃是否在执行迁移时自动调用validate。
  freemarker:
    allow-request-override: false ＃是否允许HttpServletRequest属性覆盖（隐藏）控制器生成的同名模型属性。
    allow-session-override: false ＃是否允许HttpSession属性覆盖（隐藏）控制器生成的同名模型属性。
    cache: false ＃是否启用模板缓存。
    charset: UTF-8 ＃模板编码。
    check-template-location: true ＃是否检查模板位置是否存在。
    content-type: text / html ＃Content-Type value。
    enabled: true ＃是否为此技术启用MVC视图分辨率。
    expose-request-attributes: false ＃是否应在与模板合并之前将所有请求属性添加到模型中。
    expose-session-attributes: false ＃是否应在与模板合并之前将所有HttpSession属性添加到模型中。
    expose-spring-macro-helpers: true ＃是否公开一个RequestContext供Spring的宏库使用，名称为“springMacroRequestContext”。
    prefer-file-system-access: true ＃是否更喜欢文件系统访问以进行模板加载。文件系统访问可以热检测模板更改。
    prefix: ＃在构建URL时添加前缀以查看名称的前缀。
    request-context-attribute: ＃所有视图的
    suffix: .ftl ＃在构建URL时附加到视图名称的后缀。
    template-loader-path: classpath：/ templates / ＃逗号分隔的模板路径列表。
    view-names: ＃可以解析的视图名称的白名单。
  groovy:
    template:
      allow-request-override: false ＃是否允许HttpServletRequest属性覆盖（隐藏）控制器生成的同名模型属性。
      allow-session-override: false＃是否允许HttpSession属性覆盖（隐藏）控制器生成的同名模型属性。
      cache: false ＃是否启用模板缓存。
      charset: UTF-8 ＃模板编码。
      check-template-location: true ＃是否检查模板位置是否存在。
      configuration。*: '＃请参阅GroovyMarkupConfigurer '
      content-type: text / html ＃Content-Type value。
      enabled: true ＃是否为此技术启用MVC视图分辨率。
      expose-request-attributes: false ＃是否应在与模板合并之前将所有请求属性添加到模型中。
      expose-session-attributes: false ＃在与模板合并之前是否应将所有HttpSession属性添加到模型中。
      expose-spring-macro-helpers: true ＃是否公开一个RequestContext供Spring的宏库使用，名称为“springMacroRequestContext”。
      prefix: ＃在构建URL时添加前缀以查看名称的前缀。
      request-context-attribute: ＃所有视图的RequestContext属性的名称。
      resource-loader-path: classpath：/ templates / ＃Template path。
      suffix: .tpl ＃在构建URL时附加到视图名称的后缀。
      view-names: ＃可以解析的视图名称的白名单。
  gson:
    date-format: ＃序列化Date对象时使用的格式。
    disable-html-escaping: ＃是否禁用HTML字符的转义，例如'<'，'>'等
    enable-complex-map-key-serialization: ＃是否启用复杂映射键（即非基元）的序列化。
    exclude-fields-without-expose-annotation: ＃是否排除所有不考虑序列化或反序列化但没有“Expose”注释的字段。
    field-naming-policy: ＃在序列化和反序列化期间应该应用于对象字段的命名策略。
    lenient: ＃是否宽容解析不符合RFC 4627的
    pretty-printing: ＃是否输出适合页面的序列化JSON以进行漂亮的打印。
    serialize-nulls: ＃是否序列化空字段。
  gson。＃是否通过在输出前添加一些特殊文本来生成不可执行的JSON。: ''
  h2:
    console:
      enabled: false＃是否启用控制台。
      path: / h2-console ＃控制台可用的路径。
      settings:
        trace: false ＃是否启用跟踪输出。
        web-allow-others: false ＃是否启用远程访问。
  hateoas:
    use-hal-as-default-json-media-type: true ＃是否应将application / hal + json响应发送给接受application / json的请求。
  hazelcast:
    config: ＃用于初始化Hazelcast的配置文件的位置。
  http:
    converters:
      preferred-json-mapper: ＃用于HTTP消息转换的首选JSON映射器。默认情况下，根据环境自动检测。
    encoding:
      charset: 'UTF-8 #HTTP 请求和响应的字符集。如果未明确设置，则添加到“Content-Type”标头。'
      enabled: true ＃是否启用http编码支持。
      force: ＃是否在HTTP请求和响应上强制编码到已配置的字符集。
      force-request: ＃是否在HTTP请求中强制编码到配置的charset。如果未指定“force”，则默认为true。
      force-response: ＃是否在HTTP响应上强制编码到配置的字符集。
      mapping: ＃用于编码映射的Locale。
    log-request-details: false ＃是否允许在DEBUG和TRACE级别记录（可能敏感的）请求详细信息。
  influx:
    password: ＃登录密码。
    url: 要连接的InfluxDB实例的URL。
    user: ＃登录用户。
  info:
    build:
      encoding: UTF-8 ＃文件编码。
      location: classpath：META-INF / build-info.properties ＃生成的build-info.properties文件的位置。
    git:
      encoding: UTF-8 ＃文件编码。
      location: 类路径：git.properties 生成的git.properties文件＃所在。
  integration:
    jdbc:
      initialize-schema: embedded ＃数据库模式初始化模式。
      schema: classpath中：组织/ springframework的/集成/ JDBC / schema- @ @ 平台@ @ .SQL ＃的路径SQL文件，以用于初始化数据库架构。
  jackson:
    date-format: ＃日期格式字符串或完全限定的日期格式类名。例如，`yyyy-MM-dd HH：mm：ss`。
    default-property-inclusion: ＃控制序列化期间包含的属性。配置了Jackson的JsonInclude.Include枚举中的一个值。
    deserialization。*: '#Jackson on / off功能会影响Java对象的反序列化方式。'
    generator。*: ＃Jackson开/关功能的发电机。
    joda-date-time-format: '#Joda日期时间格式字符串。如果未配置，如果使用格式字符串配置，则使用“date-format”作为后备。'
    locale: ＃用于格式化的区域设置。
    mapper。*: '#Jackson 通用开/关功能。'
    parser。*: ＃Jackson开启/关闭解析器的功能。
    property-naming-strategy: '#Jackson PropertyNamingStrategy的常数之一。也可以是PropertyNamingStrategy子类的完全限定类名。'
    serialization。*: '#Jacker on / off功能会影响Java对象的序列化方式。'
    time-zone: ＃格式化日期时使用的时区。例如，“America / Los_Angeles”或“GMT + 10”。
    visibility。*: '#Jackson 可见性阈值，可用于限制自动检测哪些方法（和字段）。'
  jdbc:
    template:
      fetch-size: -1 ＃需要更多行时应从数据库中提取的行数。
      max-rows: -1 ＃最大行数。
      query-timeout: ＃查询超时。默认是使用JDBC驱动程序的默认配置。如果未指定持续时间后缀，则将使用秒。
  jersey:
    application-path: ＃作为应用程序基URI的路径。如果指定，则覆盖“@ApplicationPath”的值。
    filter:
      order: 0 ＃Jersey过滤链顺序。
    init。*: ＃通过servlet或过滤器传递给Jersey的Init参数。
    servlet:
      load-on-startup: -1 ＃加载Jersey servlet的启动优先级。
    type: servlet ＃Jersey集成类型。
  jms:
    cache:
      consumers: false ＃是否缓存消息使用者。
      enabled: true ＃是否缓存会话。
      producers: true ＃是否缓存消息生成器。
      session-cache-size: 1 ＃会话缓存的大小（根据JMS会话类型）。
    jndi-name: ＃连接工厂JNDI名称。设置时，优先于其他连接工厂自动配置。
    listener:
      acknowledge-mode: ＃容器的确认模式。默认情况下，侦听器使用自动确认进行事务处理。
      auto-startup: true ＃启动时自动启动容器。
      concurrency: ＃最小并发使用者数。
      max-concurrency: ＃最大并发使用者数。
    pub-sub-domain: false ＃默认目标类型是否为topic。
    template:
      default-destination: ＃用于没有目标参数的发送和接收操作的默认目标。
      delivery-delay: ＃用于发送呼叫的传递延迟。
      delivery-mode: ＃交付模式。设置时启用QoS（服务质量）。
      priority: ＃发送时消息的优先级。设置时启用QoS（服务质量）。
      qos-enabled: ＃发送消息时是否启用显式QoS（服务质量）。
      receive-timeout: ＃用于接收呼叫的超时。
      time-to-live: ＃发送时消息的生存时间。设置时启用QoS（服务质量）。
  jmx:
    default域: ＃JMX域名。
    enabled: true ＃将管理bean公开给JMX域。
    server: mbeanServer ＃MBeanServer bean name。
    unique-names: false ＃是否应确保唯一的运行时对象名称。
  jooq:
    sql-dialect: '#SQL方言使用。默认情况下自动检测。'
  jpa:
    database: ＃要操作的目标数据库，默认情况下自动检测。也可以使用“databasePlatform”属性进行设置。
    database-platform: ＃要操作的目标数据库的名称，默认情况下自动检测。也可以使用“Database”枚举来设置。
    generate-ddl: false ＃是否在启动时初始化架构。
    hibernate:
      ddl-auto: '#DDL模式。这实际上是“hibernate.hbm2ddl.auto”属性的快捷方式。使用嵌入式数据库时未默认为“create-drop”，并且未检测到架构管理器。否则，默认为“none”。'
      naming:
        implicit-strategy: ＃隐式命名策略的完全限定名称。
        physical-strategy: ＃物理命名策略的完全限定名称。
      use-new-id-generator-mappings: ＃是否将Hibernate的较新的IdentifierGenerator用于AUTO，TABLE和SEQUENCE。
    mapping-resources: ＃Mapping资源（相当于persistence.xml中的“mapping-file”条目）。
    properties。*: ＃要在JPA提供程序上设置的其他本机属性。
    show: -sql = false ＃是否启用SQL语句的日志记录。
  jta:
    atomikos:
      connectionfactory:
        borrow-connection-timeout: 30 ＃从池中借用连接的超时时间（秒）。
        ignore-session-transacted-flag: true ＃是否在创建会话时忽略事务处理标志。
        local-transaction-mode: false ＃是否需要本地事务。
        maintenance-interval: 60 ＃池维护线程运行之间的时间（以秒为单位）。
        max-idle-time: 60 ＃从池中清除连接的时间（以秒为单位）。
        max-lifetime: 0 ＃连接在被销毁之前可以合并的时间（以秒为单位）。0表示没有限制。
        max-pool-size: 1 ＃池的最大大小。
        min-pool-size: 1 ＃池的最小大小。
        reap-timeout: 0 ＃借用连接的reap超时（以秒为单位）。0表示没有限制。
        unique-resource-name: jmsConnectionFactory ＃用于在恢复期间标识资源的唯一名称。
        xa-connection-factory-class-name: '#XAConnectionFactory的供应商特定实现。'
        xa-properties: ＃供应商特定的XA属性。
      datasource:
        borrow-connection-timeout: 30 ＃从池中借用连接的超时时间（秒）。
        concurrent-connection-validation: ＃是否使用并发连接验证。
        default-isolation-level: ＃池提供的连接的默认隔离级别。
        login-timeout: ＃建立数据库连接的超时时间（秒）。
        maintenance-interval: 60 ＃池维护线程运行之间的时间（以秒为单位）。
        max-idle-time: 60 ＃从池中清除连接的时间（以秒为单位）。
        max-lifetime: 0 ＃连接在被销毁之前可以合并的时间（以秒为单位）。0表示没有限制。
        max-pool-size: 1 ＃池的最大大小。
        min-pool-size: 1 ＃池的最小大小。
        reap-timeout: 0 ＃借用连接的reap超时（以秒为单位）。0表示没有限制。
        test-query: ＃用于在返回连接之前验证连接的SQL查询或语句。
        unique-resource-name: dataSource ＃用于在恢复期间标识资源的唯一名称。
        xa-data-source-class-name: '#XAConnectionFactory的供应商特定实现。'
        xa-properties: ＃供应商特定的XA属性。
      properties:
        allow-sub-transactions: true＃指定是否允许子事务。
        checkpoint-interval: 500 ＃检查点之间的间隔，表示为两个检查点之间的日志写入次数。
        default: '-jta -timeout = 10000ms #JTA 事务的默认超时。'
        default-max-wait-time-on-shutdown: 9223372036854775807 ＃正常关闭（no-force）等待事务完成的时间。
        enable-logging: true ＃是否启用磁盘日志记录。
        force-shutdown-on-vm-exit: false#VM是否应该关闭事务核心的强制关闭。
        log-base-dir: ＃应存储日志文件的目录。
        log-base-name: tmlog ＃Transactions日志文件基名。
        max-actives: 50 ＃最大活动事务数。
        max-timeout: 300000ms ＃事务允许的最大超时时间。
        recovery:
          delay: 10000ms ＃两次恢复扫描之间的延迟。
          forget孤儿的日志条目延迟: 86400000ms ＃延迟，之后恢复可以清除挂起（'孤立'）日志条目。
          max-retries: 5 ＃在抛出异常之前提交事务的重试次数。
          retry-interval: 10000ms ＃重试尝试之间的延迟。
        serial-jta-transactions: true ＃是否应尽可能加入子事务。
        service: ＃应该启动的事务管理器实现。
        threaded-two-phase-commit: false＃是否对参与资源使用不同（和并发）线程进行两阶段提交。
        transaction-manager-unique-name: ＃事务管理器的唯一名称。
    bitronix:
      connectionfactory:
        acquire-increment: 1 ＃在增长池时创建的连接数。
        acquisition-interval: 1 ＃获取无效连接后再次尝试获取连接之前等待的时间（以秒为单位）。
        acquisition-timeout: 30 ＃从池中获取连接的超时时间（秒）。
        allow-local-transactions: true ＃事务管理器是否应该允许混合XA和非XA事务。
        apply-transaction-timeout: false ＃是否应在XAResource登记时设置事务超时。
        automatic-enlisting-enabled: true ＃是否应自动登记和退出资源。
        cache-producer-consumers: true ＃是否应该缓存生产者和消费者。
        class-name: '#XA资源的底层实现类名。'
        defer-connection-release: true ＃提供程序是否可以在同一连接上运行多个事务并支持事务交错。
        disabled: ＃是否禁用此资源，这意味着暂时禁止从其池中获取连接。
        driver-properties: ＃应在底层实现上设置的属性。
        failed: ＃将此资源生成器标记为失败。
        ignore恢复，故障: false ＃是否应忽略恢复失败。
        max-idle-time: 60 ＃从池中清除连接的时间（以秒为单位）。
        max-pool-size: 10 ＃池的最大大小。0表示没有限制。
        min-pool-size: 0 ＃池的最小大小。
        password: ＃用于连接JMS提供程序的密码。
        share-transaction-connections: false＃是否可以在事务上下文中共享处于ACCESSIBLE状态的连接。
        test-connections: true ＃从池中获取时是否应测试连接。
        two-pc-ordering-position: 1 ＃此资源在两阶段提交期间应采取的位置（始终首先是Integer.MIN_VALUE，总是最后一次是Integer.MAX_VALUE）。
        unique-name: jmsConnectionFactory ＃用于在恢复期间标识资源的唯一名称。
        use: -tm -join = true ＃启动XAResources时是否应该使用TMJOIN。
        user: ＃用于连接到JMS提供程序的用户。
      datasource:
        acquire-increment: 1 ＃在增长池时创建的连接数。
        acquisition-interval: 1 ＃获取无效连接后再次尝试获取连接之前等待的时间（以秒为单位）。
        acquisition-timeout: 30 ＃从池中获取连接的超时时间（秒）。
        allow-local-transactions: true ＃事务管理器是否应该允许混合XA和非XA事务。
        apply-transaction-timeout: false ＃是否应在XAResource登记时设置事务超时。
        automatic-enlisting-enabled: true ＃是否应自动登记和退出资源。
        class-name: '#XA 资源的底层实现类名。'
        cursor-holdability: ＃连接的默认光标可保持性。
        defer-connection-release: true ＃数据库是否可以在同一连接上运行多个事务并支持事务交错。
        disabled: ＃是否禁用此资源，这意味着暂时禁止从其池中获取连接。
        driver-properties: ＃应在底层实现上设置的属性。
        enable: -jdbc4-connection-test = ＃从池中获取连接时是否调用Connection.isValid（）。
        failed: ＃将此资源生成器标记为失败。
        ignore-recovery-failures: false ＃是否应忽略恢复失败。
        isolation级: ＃连接的默认隔离级别。
        local-auto-commit: ＃本地事务的默认自动提交模式。
        login-timeout: ＃用于建立数据库连接的超时（以秒为单位）。
        max-idle-time: 60 ＃从池中清除连接的时间（以秒为单位）。
        max-pool-size: 10 ＃池的最大大小。0表示没有限制。
        min-pool-size: 0 ＃池的最小大小。
        prepared语句缓存大小: 0 ＃预准备语句高速缓存的目标大小。0禁用缓存。
        share-transaction-connections: false ＃是否可以在事务上下文中共享处于ACCESSIBLE状态的连接。
        test-query: ＃用于在返回连接之前验证连接的SQL查询或语句。
        two-pc-ordering-position: 1 ＃此资源在两阶段提交期间应采取的位置（始终首先是Integer.MIN_VALUE，并且始终是最后一个是Integer.MAX_VALUE）。
        unique-name: dataSource ＃用于在恢复期间标识资源的唯一名称。
        use: '-tm '
      properties:
        asynchronous2-pc: false ＃是否启用异步执行两阶段提交。
        background-recovery-interval-seconds: 60 ＃在后台运行恢复过程的时间间隔（以秒为单位）。
        current-node-only-recovery: true ＃是否仅恢复当前节点。
        debug-zero-resource-transaction: false ＃是否记录在没有单个登记资源的情况下执行的事务的创建和提交调用堆栈。
        default-transaction-timeout: 60 ＃默认事务超时，以秒为单位。
        disable-jmx: false ＃是否启用JMX支持。
        exception-analyzer: ＃设置要使用的异常分析器实现的完全限定名称。
        filter-log-status: false ＃是否启用日志过滤，以便只写入强制日志。
        force-batching-enabled: true ＃是否批量磁盘强制。
        forced-write-enabled: true ＃是否强制将日志记录到磁盘。
        graceful-shutdown-interval: 60 ＃TM在关闭时中止事务之前等待事务完成的最大秒数。
        jndi-transaction-synchronization-registry-name: ＃TransactionSynchronizationRegistry的JNDI名称。
        jndi-user-transaction-name: ＃UserTransaction的JNDI名称。
        journal: disk＃期刊的名称。可以是'disk'，'null'或类名。
        log-part1-filename: btm1.tlog ＃日志的第一个片段的名称。
        log-part2-filename: btm2.tlog ＃日志的第二个片段的名称。
        max-log-size-in-mb: 2 ＃日志片段的最大大小（兆字节）。
        resource-configuration-filename: ＃ResourceLoader配置文件名。
        server-id: '#ASCII ID必须唯一标识此TM实例。默认为机器的IP地址。'
        skip-corrupted-logs: false ＃跳过损坏的事务日志条目。
        warn-about-zero-resource-transaction: true ＃是否为没有单个登记资源的事务记录警告。
    enabled: true ＃是否启用JTA支持。
    log-dir: '#Transaction logs目录。'
    transaction-manager-id: '#Transaction manager唯一标识符。'
  kafka:
    admin:
      client-id: '#ID 在发出请求时传递给服务器。用于服务器端日志记录。'
      fail-fast: false ＃如果代理在启动时不可用，是否快速失败。
      ssl:
        key-store-type: ＃密钥库的类型。
        protocol: ＃要使用的SSL协议。
        trust-store-location: ＃信任库文件的位置。
    client-id: ''
    consumer:
      key-deserializer: '#Deserializer 类的键。'
      max-poll-records: ＃一次调用poll（）时返回的最大记录数。
      properties。*: ＃用于配置客户端的其他特定于使用者的属性。
      ssl:
        key-password: ＃密钥库文件中私钥的密码。
        key-store-location: ＃密钥库文件的位置。
        key-store-password: ''
    jaas:
      enabled: false ＃是否启用JAAS配置。
      login-module: com.sun.security.auth.module.Krb5LoginModule ＃登录模块。
      options: ＃其他JAAS选项。
    listener:
      ack-count: ＃当ackMode为“COUNT”或“COUNT_TIME”时，偏移提交之间的记录数。
      ack-mode: ＃Listener AckMode。请参阅spring-kafka文档。
      ack-time: ＃当ackMode为“TIME”或“COUNT_TIME”时，偏移提交之间的时间。
      client-id: ＃侦听器的使用者client.id属性的前缀。
      concurrency: ＃在侦听器容器中运行的线程数。
      idle-event-interval: ＃发布空闲消费者事件（未收到数据）之间的时间。
      log-container-config: ＃是否在初始化期间记录容器配置（INFO级别）。
      monitor-interval: ＃检查无响应的消费者之间的时间。如果未指定持续时间后缀，则将使用秒。
      no-poll-threshold: '#Multiplier应用于“pollTimeout”以确定消费者是否无响应。'
      poll-timeout: ＃轮询消费者时使用的超时。
      type: single ＃Listener类型。
    producer:
      acks: ＃生产者要求领导者在考虑完成请求之前收到的确认数。
      batch-size: ＃默认批量大小。
      bootstrap-servers: ＃逗号分隔的主机：端口对列表，用于建立与Kafka集群的初始连接。为生产者覆盖全球财产。
      buffer-memory: ＃生产者可用于缓冲等待发送到服务器的记录的总内存大小。
      client-id: '#ID 在发出请求时传递给服务器。用于服务器端日志记录。'
      compression-type: ＃生产者生成的所有数据的压缩类型。
      key-serializer: ＃密码的Serializer类。
      properties。*: ＃用于配置客户端的其他特定于生产者的属性。
      retries: ＃大于零时，启用重试失败的发送。
      ssl:
        key-password: ＃密钥库文件中私钥的密码。
        key-store-location: ＃密钥库文件的位置。
        key-store-password: ＃存储密钥库文件的密码。
        key-store-type: ＃密钥库的类型。
        protocol: ＃要使用的SSL协议。
        trust-store-location: ＃信任库文件的位置。
        trust-store-password: ＃存储信任存储文件的密码。
        trust-store-type: ＃信任库的类型。
      transaction-id-prefix: ＃非空时，为生产者启用事务支持。
      value-serializer: '#Serializer 类的值。'
    properties。*: ＃用于配置客户端的生产者和使用者
    ssl:
      key-store-location: ＃密钥库文件的位置。
      key-store-password: ＃存储密钥库文件的密码。
      key-store-type: ＃密钥库的类型。
      protocol: ＃要使用的SSL协议。
      trust-store-location: ＃信任库文件的位置。
      trust-store-password: ＃存储信任存储文件的密码。
      trust-store-type: ＃信任库的类型。
    streams:
      application-id: '#Kafka streams application.id property; 默认spring.application.name。'
      bootstrap-servers: ＃逗号分隔的主机：端口对列表，用于建立与Kafka集群的初始连接。覆盖流的全局属性。
      cache-max-size-buffering: ＃用于跨所有线程缓冲的最大内存大小。
      client-id: '#ID 在发出请求时传递给服务器。用于服务器端日志记录。'
      properties。*: ＃用于配置流的其他Kafka属性。
      replication-factor: ＃流处理应用程序创建的更改日志主题和重新分区主题的复制因子。
      ssl:
        key-password: ＃密钥库文件中私钥的密码。
        key-store-location: ＃密钥库文件的位置。
        key-store-password: ＃存储密钥库文件的密码。
        key-store-type: ＃密钥库的类型。
        protocol: ＃要使用的SSL协议。
        trust-store-location: ＃信任库文件的位置。
        trust-store-password: ＃存储信任存储文件的密码。
        trust-store-type: ＃信任库的类型。
      state-dir: ＃状态存储的目录位置。
    template:
      default-topic: ＃发送消息的默认主题。
  ldap:
    anonymous-read-only: false ＃只读操作是否应使用匿名环境。
    base: '#Base 后缀，所有操作都应该来自该后缀。'
    base-environment。*: '#LDAP规范设置。'
    embedded:
      base-dn: ＃基本DN列表。
      credential:
        password: ＃嵌入式LDAP密码。
        username: ＃嵌入式LDAP用户名。
      ldif: 'classpath：schema.ldif #Schema （LDIF）脚本资源引用。'
      port: 0 ＃嵌入式LDAP端口。
      validation:
        enabled: true ＃是否启用LDAP模式验证。
        schema: ＃自定义架构的路径。
    password: ＃服务器的登录密码。
    urls: ＃服务器的LDAP URL。
    username: ＃登录服务器的用户名。
  liquibase:
    change-log: classpath：/db/changelog/db.changelog-master.yaml# 更改日志配置路径。
    check-change-log-location: true ＃是否检查更改日志位置是否存在。
    contexts: ＃逗号分隔的运行时上下文列表。
    database-change-log-lock-table: DATABASECHANGELOGLOCK ＃用于跟踪并发Liquibase用法的表的名称。
    database变化日志表: DATABASECHANGELOG ＃用于跟踪更改历史记录的表的名称。
    default-schema: ＃默认数据库模式。
    drop-first: false ＃是否首先删除数据库模式。
    enabled: true ＃是否启用Liquibase支持。
    labels: ＃逗号分隔的运行时标签列表。
    liquibase-schema: '#Schema用于Liquibase对象。'
    liquibase-tablespace: ＃用于Liquibase对象的表空间。
    parameters。*: ＃更改日志参数。
    password: ＃要迁移的数据库的登录密码。
    rollback-file: ＃执行更新时写入回滚SQL的文件。
    test-rollback-on-update: false ＃是否应在执行更新之前测试回滚。
    url: ＃JDBC要迁移的数据库的URL。如果未设置，则使用主要配置的数据源。
    user: ＃要迁移的数据库的登录用户。
  mail:
    default-encoding: UTF-8 ＃默认MimeMessage编码。
    host: '#SMTP 服务器主机。例如，`smtp.example.com`。'
    jndi-name: ＃会话JNDI名称。设置时，优先于其他会话设置。
    password: '#SMTP 服务器的登录密码。'
    port: '#SMTP 服务器端口。'
    properties。*: ＃其他JavaMail会话属性。
    protocol: smtp ＃SMTP服务器使用的协议。
    test-connection: false＃是否在启动时测试邮件服务器是否可用。
    username: '#SMTP 服务器的登录用户。'
  main:
    allow-bean-definition-overriding: false ＃是否允许通过注册与现有定义同名的定义来覆盖bean定义。
    banner-mode: console ＃模式用于在应用程序运行时显示横幅。
    sources: 要包含在ApplicationContext中的
  mandatory-file-encoding: ＃应用程序必须使用的预期字符编码。
  messages:
    always-use-message-format: false ＃是否始终应用MessageFormat规则，甚至解析不带参数的消息。
    basename: messages＃逗号分隔的基本名称列表（本质上是一个完全限定的类路径位置），每个基本名称遵循ResourceBundle约定，轻松支持基于斜杠的位置。
    cache-duration: ＃加载的资源包文件缓存持续时间。未设置时，捆绑包将永久缓存。如果未指定持续时间后缀，则将使用秒。
    encoding: UTF-8 ＃消息包编码。
    fallback-to-system-locale: true ＃如果找不到特定区域设置的文件，是否回退到系统区域设置。
    use-code-as-default-message: false＃是否使用消息代码作为默认消息而不是抛出“NoSuchMessageException”。仅在开发期间推荐。
  mongodb:
    embedded:
      features: sync_delay ＃逗号分隔的要启用的功能列表。
      storage:
        database-dir: ＃用于数据存储的目录。
        oplog-size: '#oplog的最大大小。'
        repl-set-name: ＃副本集的名称。
      version: 3.5.5 ＃要使用的Mongo版本。
  mustache:
    allow-request-override: false ＃是否允许HttpServletRequest属性覆盖（隐藏）控制器生成的同名模型属性。
    allow-session-override: false ＃是否允许HttpSession属性覆盖（隐藏）控制器生成的同名模型属性。
    cache: false＃是否启用模板缓存。
    charset: UTF-8 ＃模板编码。
    check-template-location: true ＃是否检查模板位置是否存在。
    content-type: text / html ＃Content-Type value。
    enabled: true ＃是否为此技术启用MVC视图分辨率。
    expose-request-attributes: false ＃在与模板合并之前是否应将所有请求属性添加到模型中。
    expose-session-attributes: false＃是否应在与模板合并之前将所有HttpSession属性添加到模型中。
    expose-spring-macro-helpers: true ＃是否公开一个RequestContext供Spring的宏库使用，名称为“springMacroRequestContext”。
    prefix: classpath：/ templates / ＃适用于模板名称的前缀。
    request-context-attribute: ＃所有视图的
    view-names: ＃可以解析的视图名称的白名单。
  mvc:
    async:
      request-timeout: ＃异步请求处理
    contentnegotiation:
      favor-path-extension: false ＃是否应使用URL路径中的路径扩展来确定所请求的媒体类型。
      media-types。*: ＃映射内容协商的媒体类型的文件扩展名。例如，yml到text / yaml。
      parameter-name: ＃启用“favor-parameter”时要使用的查询参数名称。
    date-format: ＃要使用的日期格式。例如，`dd / MM / yyyy`。
    dispatch-options-request: true ＃是否将OPTIONS请求分派给FrameworkServlet doService方法。
    dispatch-trace-request: false ＃是否将TRACE请求分派给FrameworkServlet doService方法。
    favicon:
      enabled: true ＃是否启用favicon.ico的解析。
    formcontent:
      filter:
        enabled: true ＃是否启用Spring的FormContentFilter。
    hiddenmethod:
      filter:
        enabled: true＃是否启用Spring的HiddenHttpMethodFilter。
    ignore-default-model-on-redirect: true ＃在重定向场景中是否应忽略“默认”模型的内容。
    locale: ＃要使用的语言环境。默认情况下，“Accept-Language”标头会覆盖此区域设置。
    locale-resolver: accept-header ＃定义应如何解析语言环境。
    log-resolved-exception: false ＃是否启用由“HandlerExceptionResolver”解析的异常的警告日志记录，“DefaultHandlerExceptionResolver”除外。
    message-codes-resolver-format: ＃格式化消息代码的策略。例如，`PREFIX_ERROR_CODE`。
    pathmatch:
      use-registered-suffix-pattern: false ＃后缀模式匹配是否仅适用于使用“spring.mvc.contentnegotiation.media-types。*”注册的扩展。
      use-suffix-pattern: false ＃将模式与请求匹配时是否使用后缀模式匹配（“。*”）。
    servlet:
      load-on-startup: -1 ＃加载调度程序servlet的启动优先级。
      path: / ＃调度程序servlet的路径。
    static-path-pattern: / ** ＃用于静态资源的路径模式。
    throw-exception-if-no-handler-found: false ＃如果没有找到Handler来处理请求，是否应该抛出“NoHandlerFoundException”。
    view:
      prefix: '#Spring MVC视图前缀。'
      suffix: '#Spring MVC视图后缀。'
  output:
    ansi:
      enabled: 检测＃配置的ANSI输出。
  pid:
    fail-on-write-error: ＃如果使用ApplicationPidFileWriter但它无法写入PID文件，则失败。
    file: ＃要写入的PID文件的位置（如果使用ApplicationPidFileWriter）。
  profiles:
    active: ＃逗号分隔的有源配置文件列表。可以通过命令行开关覆盖。
    include: ＃无条件地激活指定的逗号分隔的配置文件列表（或使用YAML时的配置文件列表）。
  quartz:
    auto-启动: 真＃是否自动启动初始化后的调度。
    jdbc:
      comment-prefix: '- #SQL 初始化脚本中单行注释的前缀。'
      initialize-schema: embedded ＃数据库模式初始化模式。
      schema: classpath：org / quartz / impl / jdbcjobstore / tables_ @ @ platform @@ .sql ＃用于初始化数据库模式的SQL文件的路径。
    job-store-type: memory ＃Quartz作业存储类型。
    overwrite-existing-jobs: false ＃配置的作业是否应覆盖现有的作业定义。
    properties。*: ＃其他Quartz Scheduler属性。
    scheduler-name: quartzScheduler ＃调度程序的名称。
    startup-delay: 0s ＃一旦初始化完成，调度程序启动之后的延迟。
    wait-for-jobs-to-complete-on-shutdown: false ＃是否等待在关闭时运行的作业完成。
  rabbitmq:
    addresses: ＃逗号分隔的客户端应连接的地址列表。
    cache:
      channel:
        checkout-timeout: ＃达到缓存大小后等待获取通道的持续时间。
        size: ＃要在缓存中保留的通道数。
      connection:
        mode: channel ＃连接工厂缓存模式。
        size: ＃缓存的连接数。
    connection-timeout: ＃连接超时。将其设置为零以永远等待。
    dynamic: true ＃是否创建AmqpAdmin bean。
    host: localhost ＃RabbitMQ主机。
    listener:
      direct:
        acknowledge-mode: ＃容器的确认模式。
        auto-启动: true ＃是否在启动时自动启动容器。
        consumers-per-queue: ＃每个队列的消费者数量。
        default-requeue-rejected: ＃默认情况下，拒绝的交付是否重新排队。
        idle-event-interval: ＃应该发布空闲容器事件的频率。
        missing-queues-fatal: false ＃如果容器声明的队列在代理上不可用，则是否失败。
        prefetch: ＃每个消费者可能未完成的未确认消息的最大数量。
        retry:
          enabled: false ＃是否启用发布重试。
          initial-interval: 1000ms ＃第一次和第二次尝试传递消息之间的持续时间。
          max: -interval = 10000ms ＃尝试之间的最长持续时间。
          max-attempts: 3 ＃传递邮件的最大尝试次数。
          multiplier: 1 ＃乘数应用于先前的重试间隔。
          stateless: true ＃重试是无状态还是有状态。
      simple:
        acknowledge-mode: ＃容器的确认模式。
        auto-startup: true ＃是否在启动时自动启动容器。
        concurrency: ＃侦听器调用者线程的最小数量。
        default-requeue-rejected: ＃默认情况下，拒绝的交付是否重新排队。
        idle-event-interval: ＃应该发布空闲容器事件的频率。
        max-concurrency: ＃侦听器调用者线程的最大数量。
        missing-queues-fatal: true ＃如果容器声明的队列在代理上不可用，则是否失败和/或如果在运行时删除一个或多个队列，是否停止容器。
        prefetch: ＃每个消费者可能未完成的未确认消息的最大数量。
        retry:
          enabled: false ＃是否启用发布重试。
          initial-interval: 1000ms＃第一次和第二次尝试传递消息之间的持续时间。
          max: -interval = 10000ms ＃尝试之间的最长持续时间。
          max-attempts: 3 ＃传递邮件的最大尝试次数。
          multiplier: 1 ＃乘数应用于上一个重试间隔。
          stateless: true ＃重试是无状态还是有状态。
        transaction-size: ＃确认模式为AUTO时，acks之间处理的消息数。如果大于预取，则预取将增加到此值。
      type: simple ＃Listener容器类型。
    password: guest ＃登录以对代理进行身份验证。
    port: 5672 ＃RabbitMQ端口。
    publisher-confirms: false ＃是否启用发布者确认。
    publisher-returns: false ＃是否启用发布者返回。
    requested-heartbeat: ＃请求心跳超时; 零，没有。如果未指定持续时间后缀，则将使用秒。
    ssl:
      algorithm: '#SSL 算法使用。默认情况下，由Rabbit客户端库配置。'
      enabled: false ＃是否启用SSL支持。
      key-store: ＃保存SSL证书的密钥库的路径。
      key-store-password: ＃用于访问密钥库的密码。
      key-store-type: PKCS12 ＃密钥库类型。
      trust-store: ＃持有SSL证书的信任存储。
      trust-store-password: ＃用于访问信任库的密码。
      trust-store-type: 'JKS #Trust store type。'
      validate-server-certificate: true ＃是否启用服务器端证书验证。
      verify-hostname: true ＃是否启用主机名验证。
    template:
      default-receive-queue: ＃从明确指定none时接收消息的默认队列的名称。
      mandatory: ＃是否启用强制消息。
      receive-timeout: ＃receive（）`操作的超时。
      reply-timeout: '#outoutout用于`sendAndReceive（）`操作。'
      retry:
        enabled: false ＃是否启用发布重试。
        initial-interval: 1000ms ＃第一次和第二次尝试传递消息之间的持续时间。
        max: -interval = 10000ms ＃尝试之间的最长持续时间。
        max-attempts: 3 ＃传递邮件的最大尝试次数。
        multiplier: 1 ＃乘数应用于先前的重试间隔。
      routing-key: ＃用于发送操作的默认路由密钥的值。
    username: guest ＃登录用户以对代理进行身份验证。
    virtual-host: ＃连接到代理时使用的虚拟主机。
  reactor:
    stacktrace-mode:
      enabled: 'false #Reactor 是否应该在运行时收集'
  redis:
    cluster:
      max: -redirects = ＃在群集中执行命令时要遵循的最大重定向数。
      nodes: ＃逗号分隔的“host：port”对列表引导自。
    database: 0 ＃连接工厂使用的数据库索引。
    host: localhost#Redis服务器主机。
    jedis:
      pool:
        max: -wait = -1ms ＃在池耗尽时，在抛出异常之前连接分配应该阻塞的最长时间。使用负值无限期阻止。
        max-active: 8 ＃池在给定时间可以分配的最大连接数。使用负值无限制。
        max-idle: 8 ＃池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接。
        min-idle: 0＃目标为池中维护的最小空闲连接数。此设置仅在其为正时才有效。
    lettuce:
      pool:
        max: -wait = -1ms ＃在池耗尽时，在抛出异常之前连接分配应阻塞的最长时间。使用负值无限期阻止。
        max-active: 8 ＃池在给定时间可以分配的最大连接数。使用负值无限制。
        max-idle: 8 ＃池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接。
        min-idle: 0＃目标为池中维护的最小空闲连接数。此设置仅在其为正时才有效。
      shutdown-timeout: 100ms ＃关机超时。
    password: ＃redis服务器的登录密码。
    port: '6379 #Redis服务器端口。'
    sentinel:
      master: '#Redis服务器的名称。'
      nodes: ＃逗号分隔的“host：port”对列表。
    ssl: false ＃是否启用SSL支持。
    timeout: ＃连接超时。
    url: '＃连接URL。覆盖主机，端口和密码。用户被忽略。示例：redis：// user：password@example.com ：6379 '
  resources:
    add-mappings: true ＃是否启用默认资源处理。
    cache:
      cachecontrol:
        cache-private: ＃表示响应消息仅供单个用户使用，不得由共享高速缓存存储。
        cache-public: ＃表示任何缓存都可以存储响应。
        max-age: ＃应该缓存响应的最长时间，如果未指定持续时间后缀，则以秒为单位。
        must-revalidate: ＃表示一旦它变得陈旧，缓存一定不能使用响应而不用服务器重新验证它。
        no-cache: ＃表示只有在与服务器重新验证时才能重用缓存的响应。
        no-store: ＃表示在任何情况下都不缓存响应。
        no-transform: ＃指出不应转换响应内容的中介（缓存和其他）。
        proxy-revalidate: ＃与“must-revalidate”指令的含义相同，但它不适用于私有缓存。
        s-max-age: ＃共享缓存应缓存响应的最长时间，如果未指定持续时间后缀，则以秒为单位。
        stale-if-error: ＃遇到错误时可以使用响应的最长时间，如果未指定持续时间后缀，则以秒为单位。
        stale-while-revalidate: ＃响应变为失效后的最长响应时间，如果未指定持续时间后缀，则以秒为单位。
      period: ＃资源处理程序所服务资源的缓存周期。如果未指定持续时间后缀，则将使用秒。
    chain:
      cache: true ＃是否在资源链中启用缓存。
      compressed: false ＃是否启用已压缩资源的解析（gzip，brotli）。
      enabled: ＃是否启用Spring资源处理链。默认情况下，禁用，除非至少启用了一个策略。
      html应用程序缓存: false ＃是否启用HTML5应用程序缓存清单重写。
      strategy:
        content:
          enabled: false ＃是否启用内容版本策略。
          paths: / ** ＃逗号分隔的模式列表，应用于内容版本策略。
        fixed:
          enabled: false ＃是否启用固定版本策略。
          paths: / ** ＃以逗号分隔的模式列表应用于固定版本策略。
          version: ＃用于固定版本策略的版本字符串。
    static-locations: classpath：/ META-INF / resources /，classpath：/ resources /，classpath：/ static /，classpath：/ public / ＃静态资源的位置。
  security:
    filter:
      dispatcher-types: async，error，request ＃安全过滤器链调度程序类型。
      order: -100 ＃安全过滤器链顺序。
    oauth2:
      client:
        provider。*: ＃OAuth提供商详细信息。
        registration。*: ＃OAuth客户注册。
      resourceserver:
        jwt:
          issuer-uri: OpenID Connect Provider声明为其颁发者标识符的URI。
          jwk-set-uri: ＃JSON用于验证JWT令牌的Web Key URI。
    user:
      name: user ＃默认用户名。
      password: ＃默认用户名的密码。
      roles: ＃授予默认用户名的角色。
  sendgrid:
    api-key: ＃SendGrid API密钥。
    proxy:
      host: ＃SendGrid代理主机。
      port: ＃SendGrid代理端口。
  servlet:
    multipart:
      enabled: true ＃是否启用分段上传支持。
      file-size-threshold: 0B ＃将文件写入磁盘后的阈值。
      location: ＃上传文件的中间位置。
      max-file-size: 1MB ＃最大文件大小。
      max-request-size: 10MB ＃最大请求大小。
      resolve-lazily: false ＃是否在文件或参数访问时懒惰地解析多部分请求。
  session:
    hazelcast:
      flush-mode: on-save ＃会话刷新模式。
      map-name: spring：session：sessions ＃用于存储会话的地图的名称。
    jdbc:
      cleanup-cron: '0 * * * * * #cron 表达式用于过期的会话清理作业。'
      initialize-schema: embedded ＃数据库模式初始化模式。
      schema: classpath中：组织/ springframework的/会话/ JDBC / schema- @ @ 平台@ @ .SQL ＃的路径SQL文件，以用于初始化数据库架构。
      table-name: SPRING_SESSION ＃用于存储会话的数据库表的名称。
    mongodb:
      collection-name: sessions ＃用于存储会话的集合名称。
    redis:
      cleanup-cron: '0 * * * * * #cron 表达式用于过期的会话清理作业。'
      flush-mode: 'on-save #sessions flush mode。'
      namespace: spring：session ＃用于存储会话的密钥的命名空间。
    servlet:
      filter-dispatcher-types: async，error，request ＃会话存储库过滤器调度程序类型。
      filter-order: -2147483598 ＃会话存储库过滤顺序。
    store-type: ＃会话存储类型。
    timeout: ＃会话超时。如果未指定持续时间后缀，则将使用秒。
  task:
    execution:
      pool:
        allow-core-thread-timeout: true ＃是否允许核心线程超时。这可以实现池的动态增长和收缩。
        core-size: 8＃核心线程数。
        keep-alive: 60s ＃终止之前线程可能保持空闲的时间限制。
        max-size: ＃允许的最大线程数。如果任务正在填满队列，则池可以扩展到该大小以适应负载。如果队列无限制，则忽略。
        queue-capacity: ＃队列容量。无限制的容量不会增加池，因此会忽略“max-size”属性。
      thread-name-prefix: task- ＃用于新创建的线程名称的前缀。
    scheduling:
      pool:
        size: 1 ＃允许的最大线程数。
      thread-name-prefix: scheduling- ＃用于新创建的线程名称的前缀。
  test:
    database:
      replace: any ＃现有DataSource的类型更换。
    mockmvc:
      print: 默认#MVC 打印选项。
  thymeleaf:
    cache: true ＃是否启用模板缓存。
    check-template: true ＃是否在呈现模板之前检查模板是否存在。
    check-template-location: true ＃是否检查模板位置是否存在。
    enable-spring-el-compiler: false ＃在SpringEL表达式中启用SpringEL编译器。
    enabled: true ＃是否为Web框架启用Thymeleaf视图解析。
    encoding: UTF-8 ＃模板文件编码。
    excluded: -视图-名称= ＃逗号分隔的视图名称列表（允许的模式）应从分辨率中排除。
    mode: HTML ＃要应用于模板的模板模式。另请参见Thymeleaf的TemplateMode枚举。
    prefix: classpath：/ templates / ＃在构建URL时添加前缀以查看名称的前缀。
    reactive:
      chunked-mode-view-names: ＃逗号分隔的视图名称列表（允许的模式），当设置了最大块大小时，它应该是在CHUNKED模式下执行的唯一列表。
      full-mode-view-names: ＃逗号分隔的视图名称列表（允许的模式），即使设置了最大块大小，也应该在FULL模式下执行。
      max-chunk-size: 0B ＃用于写入响应的数据缓冲区的最大大小。
      media-types: ＃视图技术支持的媒体类型。
    render-hidden-markers-before-checkboxes: false ＃是否应在复选框元素本身之前呈现隐藏的表单输入作为复选框的标记。
    servlet:
      content-type: text / html ＃Content-Type写入HTTP响应的值。
      produce-partial-output-while-processing: true#Thymeleaf是否应尽快开始编写部分输出或缓冲直到模板处理完成。
    suffix: .html ＃在构建URL时附加到视图名称的后缀。
    template-resolver-order: ＃链中模板解析器的顺序。
    view-names: ＃逗号分隔的视图名称列表（允许的模式），可以解析。
  transaction:
    default-timeout: ＃默认事务超时。如果未指定持续时间后缀，则将使用秒。
    rollback-on-commit-failure: ＃是否回滚提交失败。
  webflux:
    date-format: ＃要使用的日期格式。例如，`dd / MM / yyyy`。
    hiddenmethod:
      filter:
        enabled: true＃是否启用Spring的HiddenHttpMethodFilter。
    static-path-pattern: / ** ＃用于静态资源的路径模式。
  webservices:
    path: / services ＃作为服务基URI的路径。
    servlet:
      init: ＃Servlet init参数传递给Spring Web Services。
      load-on-startup: -1 ＃加载Spring Web Services servlet的启动优先级。
    wsdl-locations: ＃逗号分隔的WSDL位置列表以及要作为bean公开的随附XSD。
trace: false ＃启用跟踪日志。
共有的附加属性。spring:
  kafka:
    ssl:
      key-password: ＃密钥库文件中私钥的密码。
到您自己的应用程序中。^^^: ''
堆栈跟踪信息。#SENDGRID（SendGridAutoConfiguration）: ''
将由: Flyway 使用的架构架构历史记录表的名称。spring.flyway.target = ＃应考虑迁移的目标版本。
常用前缀，用于页码和页面大小参数。spring:
  data:
    web:
      pageable:
        qualifier-delimiter: _ ＃在限定符与实际页码和大小属性之间使用的分隔符。
应用程序的名称。server:
  servlet:
    jsp:
      class-name: org.apache.jasper.servlet.JspServlet＃用于JSP的servlet的类名。
弹簧。: true ＃注册OpenEntityManagerInViewInterceptor。将JPA EntityManager绑定到线程以进行整个请求处理。
此样本文件作为指南提供。不要将它的#complete复制: ''
的用户名（如果不同）。spring:
  datasource:
    schema-password: ＃执行DDL脚本的数据库的密码（如果不同）。
的频率。轮询仪表时，会重新计算其值，如果值已更改（或者publishUnchangedMeters为true），则会将其发送到StatsD服务器。management:
  metrics:
    export:
      statsd:
        port: 8125 ＃StatsD服务器的端口，用于接收导出的指标。
超时之前的时间。spring:
  mvc:
    contentnegotiation:
      favor-parameter: false ＃是否应使用请求参数（默认为“format”）来确定请求的媒体类型。
默认情况下是否启用或禁用所有端点。#ENDPOINTS: JMX CONFIGURATION（JmxEndpointProperties）
＃: 数据源 （DataSourceAutoConfiguration＆DataSourceProperties）
＃-----: '----------------------------------- '
＃----------------------------: '------------ '
＃----------------------------------: '------ '
＃----------------------------------------: ''
＃ACTUATOR: 'PROPERTIES '
＃AOP: ''
＃ActiveMQ的（ActiveMQProperties）: ''
＃BANNER: ''
＃BITRONIX: ''
＃COMMON: 'SPRING BOOT PROPERTIES '
＃CORE: 'PROPERTIES '
＃COUCHBASE（CouchbaseProperties）: ''
＃DATA: WEB（SpringDataWebProperties）
＃EMBEDDED: MONGODB（EmbeddedMongoProperties）
＃FLYWAY（FlywayProperties）: ''
＃H2: Web控制台（H2ConsoleProperties）
＃HEALTH: 'INDICATORS '
＃INTEGRATION: 'PROPERTIES '
＃InfluxDB（InfluxDbProperties）: ''
＃JMX: ''
＃JOOQ: （JooqProperties）
＃JPA: （JpaBaseConfiguration，HibernateJpaAutoConfiguration）
＃LOG: FILE ENDPOINT（LogFileWebEndpoint，LogFileWebEndpointProperties）
＃LOGGERS: ENDPOINT（LoggersEndpoint）
＃MANAGEMENT: HTTP SERVER（ManagementServerProperties）
＃NEO4J（Neo4jProperties）: ''
＃OUTPUT: ''
＃PROFILES: ''
＃Quartz调度器（QuartzProperties）: ''
＃SECURITY: OAUTH2 RESOURCE SERVER（OAuth2ResourceServerProperties）
＃SECURITY（SecurityProperties）: ''
＃WEB: 'PROPERTIES '
＃存储密钥库文件的密码。: ''
＃指标发布计划程序使用的线程数。: ''
＃是否启用将指标导出到Graphite。: ''
＃是否自动创建索引（如果不存在）。: ''
＃条件报告ENDPOINT（ConditionsReportEndpoint）: ''
＃每个请求用于此后端的度量数。如果找到更多测量值，则将发出多个请求。: ''
＃用于发送操作的默认交换的名称。: ''
